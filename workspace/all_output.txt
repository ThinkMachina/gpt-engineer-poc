The core classes, functions, and methods that will be necessary for the API are as follows:

1. Task: Represents a single task in the to-do list. It has properties such as name, description, due date, and status.

2. TaskManager: Manages the tasks in the to-do list. It provides methods for adding, editing, marking as complete, and deleting tasks. It also supports filtering and sorting tasks.

3. API: Handles the HTTP requests and routes them to the appropriate methods in the TaskManager. It provides endpoints for adding, editing, marking as complete, deleting, and retrieving tasks.

4. Pagination: Manages the pagination of the task list in the API. It calculates the offset and limit for retrieving a subset of tasks.

5. Sorting: Handles the sorting of tasks based on different criteria such as ID, name, and due date.

Now, let's proceed with creating the necessary files and their contents.

1. `task.py`

```python
from dataclasses import dataclass

@dataclass
class Task:
    name: str
    description: str = ""
    due_date: str = ""
    status: bool = False
```

2. `task_manager.py`

```python
from typing import List
from task import Task

class TaskManager:
    def __init__(self):
        self.tasks = []
        self.task_id_counter = 1

    def add_task(self, task: Task) -> int:
        task.id = self.task_id_counter
        self.task_id_counter += 1
        self.tasks.append(task)
        return task.id

    def edit_task(self, task_id: int, name: str, description: str, due_date: str) -> bool:
        for task in self.tasks:
            if task.id == task_id:
                task.name = name
                task.description = description
                task.due_date = due_date
                return True
        return False

    def mark_task_as_complete(self, task_id: int) -> bool:
        for task in self.tasks:
            if task.id == task_id:
                task.status = True
                return True
        return False

    def delete_task(self, task_id: int) -> bool:
        for task in self.tasks:
            if task.id == task_id:
                self.tasks.remove(task)
                return True
        return False

    def get_tasks(self) -> List[Task]:
        return self.tasks
```

3. `api.py`

```python
from flask import Flask, request, jsonify
from task import Task
from task_manager import TaskManager
from pagination import Pagination
from sorting import Sorting

app = Flask(__name__)
task_manager = TaskManager()
pagination = Pagination()
sorting = Sorting()

@app.route("/tasks", methods=["GET"])
def get_tasks():
    page = request.args.get("page", default=1, type=int)
    per_page = request.args.get("per_page", default=10, type=int)
    filter_status = request.args.get("filter_status", default=None, type=bool)
    filter_due_date_start = request.args.get("filter_due_date_start", default=None, type=str)
    filter_due_date_end = request.args.get("filter_due_date_end", default=None, type=str)
    sort_by = request.args.get("sort_by", default="due_date", type=str)
    sort_order = request.args.get("sort_order", default="asc", type=str)

    filtered_tasks = task_manager.get_tasks()
    if filter_status is not None:
        filtered_tasks = [task for task in filtered_tasks if task.status == filter_status]
    if filter_due_date_start is not None:
        filtered_tasks = [task for task in filtered_tasks if task.due_date >= filter_due_date_start]
    if filter_due_date_end is not None:
        filtered_tasks = [task for task in filtered_tasks if task.due_date <= filter_due_date_end]

    sorted_tasks = sorting.sort_tasks(filtered_tasks, sort_by, sort_order)
    paginated_tasks = pagination.paginate(sorted_tasks, page, per_page)

    response = {
        "tasks": [task.__dict__ for task in paginated_tasks],
        "total_tasks": len(filtered_tasks),
        "total_pages": pagination.get_total_pages(len(filtered_tasks), per_page),
        "current_page": page,
        "per_page": per_page
    }
    return jsonify(response)

@app.route("/tasks", methods=["POST"])
def add_task():
    data = request.get_json()
    name = data.get("name")
    description = data.get("description", "")
    due_date = data.get("due_date", "")
    task = Task(name, description, due_date)
    task_id = task_manager.add_task(task)
    return jsonify({"task_id": task_id}), 201

@app.route("/tasks/<int:task_id>", methods=["PUT"])
def edit_task(task_id):
    data = request.get_json()
    name = data.get("name")
    description = data.get("description", "")
    due_date = data.get("due_date", "")
    if task_manager.edit_task(task_id, name, description, due_date):
        return jsonify({"message": "Task updated successfully"})
    else:
        return jsonify({"message": "Task not found"}), 404

@app.route("/tasks/<int:task_id>/complete", methods=["PUT"])
def mark_task_as_complete(task_id):
    if task_manager.mark_task_as_complete(task_id):
        return jsonify({"message": "Task marked as complete"})
    else:
        return jsonify({"message": "Task not found"}), 404

@app.route("/tasks/<int:task_id>", methods=["DELETE"])
def delete_task(task_id):
    if task_manager.delete_task(task_id):
        return jsonify({"message": "Task deleted successfully"})
    else:
        return jsonify({"message": "Task not found"}), 404

if __name__ == "__main__":
    app.run()
```

4. `pagination.py`

```python
class Pagination:
    def paginate(self, tasks, page, per_page):
        start_index = (page - 1) * per_page
        end_index = start_index + per_page
        return tasks[start_index:end_index]

    def get_total_pages(self, total_items, per_page):
        return (total_items + per_page - 1) // per_page
```

5. `sorting.py`

```python
from operator import attrgetter

class Sorting:
    def sort_tasks(self, tasks, sort_by, sort_order):
        if sort_by == "id":
            tasks.sort(key=attrgetter("id"), reverse=(sort_order == "desc"))
        elif sort_by == "name":
            tasks.sort(key=attrgetter("name"), reverse=(sort_order == "desc"))
        elif sort_by == "due_date":
            tasks.sort(key=attrgetter("due_date"), reverse=(sort_order == "desc"))
        return tasks
```

This completes the implementation of the API for managing a to-do list. The code is organized into separate files for each class and module, following best practices for Python development. The API is built using Flask and includes endpoints for adding, editing, marking as complete, deleting, and retrieving tasks. Pagination and sorting are also supported.